// Signature format: 2.0
package android.net.eap {

  public final class EapSessionConfig {
    method @Nullable public android.net.eap.EapSessionConfig.EapAkaConfig getEapAkaConfig();
    method @Nullable public android.net.eap.EapSessionConfig.EapAkaPrimeConfig getEapAkaPrimeConfig();
    method @NonNull public byte[] getEapIdentity();
    method @Nullable public android.net.eap.EapSessionConfig.EapMsChapV2Config getEapMsChapV2onfig();
    method @Nullable public android.net.eap.EapSessionConfig.EapSimConfig getEapSimConfig();
  }

  public static final class EapSessionConfig.Builder {
    ctor public EapSessionConfig.Builder();
    method @NonNull public android.net.eap.EapSessionConfig build();
    method @NonNull public android.net.eap.EapSessionConfig.Builder setEapAkaConfig(int, int);
    method @NonNull public android.net.eap.EapSessionConfig.Builder setEapAkaPrimeConfig(int, int, @NonNull String, boolean);
    method @NonNull public android.net.eap.EapSessionConfig.Builder setEapIdentity(@NonNull byte[]);
    method @NonNull public android.net.eap.EapSessionConfig.Builder setEapMsChapV2Config(@NonNull String, @NonNull String);
    method @NonNull public android.net.eap.EapSessionConfig.Builder setEapSimConfig(int, int);
  }

  public static class EapSessionConfig.EapAkaConfig extends android.net.eap.EapSessionConfig.EapUiccConfig {
  }

  public static class EapSessionConfig.EapAkaPrimeConfig extends android.net.eap.EapSessionConfig.EapAkaConfig {
    method public boolean allowsMismatchedNetworkNames();
    method @NonNull public String getNetworkName();
  }

  public abstract static class EapSessionConfig.EapMethodConfig {
    method public int getMethodType();
  }

  public static class EapSessionConfig.EapMsChapV2Config extends android.net.eap.EapSessionConfig.EapMethodConfig {
    method @NonNull public String getPassword();
    method @NonNull public String getUsername();
  }

  public static class EapSessionConfig.EapSimConfig extends android.net.eap.EapSessionConfig.EapUiccConfig {
  }

  public abstract static class EapSessionConfig.EapUiccConfig extends android.net.eap.EapSessionConfig.EapMethodConfig {
    method public int getAppType();
    method public int getSubId();
  }

}

package android.net.ipsec.ike {

  public final class IkeSession implements java.lang.AutoCloseable {
    ctor public IkeSession(@NonNull android.content.Context, @NonNull android.net.ipsec.ike.IkeSessionParams, @NonNull android.net.ipsec.ike.ChildSessionParams, @NonNull java.util.concurrent.Executor, @NonNull android.net.ipsec.ike.IkeSessionCallback, @NonNull android.net.ipsec.ike.ChildSessionCallback);
    method public void close();
    method public void closeChildSession(@NonNull android.net.ipsec.ike.ChildSessionCallback);
    method public void kill();
    method public void openChildSession(@NonNull android.net.ipsec.ike.ChildSessionParams, @NonNull android.net.ipsec.ike.ChildSessionCallback);
  }

  public interface IkeSessionCallback {
    method public void onError(@NonNull android.net.ipsec.ike.exceptions.IkeProtocolException);
  }

  public final class IkeSessionParams {
    method @NonNull public java.util.List<android.net.ipsec.ike.IkeSessionParams.IkeConfigRequest> getConfigurationRequests();
    method @IntRange(from=0x14, to=0x708) public int getDpdDelaySeconds();
    method @IntRange(from=0x12c, to=0x15180) public int getHardLifetimeSeconds();
    method @Nullable public android.net.ipsec.ike.ike3gpp.Ike3gppExtension getIke3gppExtension();
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig getLocalAuthConfig();
    method @NonNull public android.net.ipsec.ike.IkeIdentification getLocalIdentification();
    method @NonNull public android.net.Network getNetwork();
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig getRemoteAuthConfig();
    method @NonNull public android.net.ipsec.ike.IkeIdentification getRemoteIdentification();
    method public int[] getRetransmissionTimeoutsMillis();
    method @NonNull public java.util.List<android.net.ipsec.ike.IkeSaProposal> getSaProposals();
    method @NonNull public String getServerHostname();
    method @IntRange(from=0x78, to=0x15180) public int getSoftLifetimeSeconds();
    method public boolean hasIkeOption(int);
    field public static final int IKE_OPTION_ACCEPT_ANY_REMOTE_ID = 0; // 0x0
    field public static final int IKE_OPTION_EAP_ONLY_AUTH = 1; // 0x1
  }

  public static final class IkeSessionParams.Builder {
    ctor public IkeSessionParams.Builder(@NonNull android.content.Context);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder addIkeOption(int);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder addPcscfServerRequest(@NonNull java.net.InetAddress);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder addPcscfServerRequest(int);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder addSaProposal(@NonNull android.net.ipsec.ike.IkeSaProposal);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams build();
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder removeIkeOption(int);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setAuthDigitalSignature(@Nullable java.security.cert.X509Certificate, @NonNull java.security.cert.X509Certificate, @NonNull java.security.PrivateKey);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setAuthDigitalSignature(@Nullable java.security.cert.X509Certificate, @NonNull java.security.cert.X509Certificate, @NonNull java.util.List<java.security.cert.X509Certificate>, @NonNull java.security.PrivateKey);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setAuthEap(@Nullable java.security.cert.X509Certificate, @NonNull android.net.eap.EapSessionConfig);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setAuthPsk(@NonNull byte[]);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setDpdDelaySeconds(@IntRange(from=0x14, to=0x708) int);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setIke3gppExtension(@NonNull android.net.ipsec.ike.ike3gpp.Ike3gppExtension);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setLifetimeSeconds(@IntRange(from=0x12c, to=0x15180) int, @IntRange(from=0x78, to=0x15180) int);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setLocalIdentification(@NonNull android.net.ipsec.ike.IkeIdentification);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setNetwork(@NonNull android.net.Network);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setRemoteIdentification(@NonNull android.net.ipsec.ike.IkeIdentification);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setRetransmissionTimeoutsMillis(@NonNull int[]);
    method @NonNull public android.net.ipsec.ike.IkeSessionParams.Builder setServerHostname(@NonNull String);
  }

  public static interface IkeSessionParams.ConfigRequestIpv4PcscfServer extends android.net.ipsec.ike.IkeSessionParams.IkeConfigRequest {
    method @Nullable public java.net.Inet4Address getAddress();
  }

  public static interface IkeSessionParams.ConfigRequestIpv6PcscfServer extends android.net.ipsec.ike.IkeSessionParams.IkeConfigRequest {
    method @Nullable public java.net.Inet6Address getAddress();
  }

  public abstract static class IkeSessionParams.IkeAuthConfig {
  }

  public static class IkeSessionParams.IkeAuthDigitalSignLocalConfig extends android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig {
    method @NonNull public java.security.cert.X509Certificate getClientEndCertificate();
    method @NonNull public java.util.List<java.security.cert.X509Certificate> getIntermediateCertificates();
    method @NonNull public java.security.PrivateKey getPrivateKey();
  }

  public static class IkeSessionParams.IkeAuthDigitalSignRemoteConfig extends android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig {
    method @Nullable public java.security.cert.X509Certificate getRemoteCaCert();
  }

  public static class IkeSessionParams.IkeAuthEapConfig extends android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig {
    method @NonNull public android.net.eap.EapSessionConfig getEapConfig();
  }

  public static class IkeSessionParams.IkeAuthPskConfig extends android.net.ipsec.ike.IkeSessionParams.IkeAuthConfig {
    method @NonNull public byte[] getPsk();
  }

  public static interface IkeSessionParams.IkeConfigRequest {
  }

}

package android.net.ipsec.ike.exceptions {

  public abstract class IkeProtocolException extends android.net.ipsec.ike.exceptions.IkeException {
    method @Nullable public byte[] getErrorData();
  }

}

package android.net.ipsec.ike.ike3gpp {

  public final class Ike3gppBackoffTimer extends android.net.ipsec.ike.ike3gpp.Ike3gppInfo {
    method public int getBackoffCause();
    method public byte getBackoffTimer();
    method public int getInfoType();
    field public static final int ERROR_TYPE_NETWORK_FAILURE = 10500; // 0x2904
    field public static final int ERROR_TYPE_NO_APN_SUBSCRIPTION = 9002; // 0x232a
  }

  public final class Ike3gppExtension {
    ctor public Ike3gppExtension(@NonNull android.net.ipsec.ike.ike3gpp.Ike3gppParams, @NonNull android.net.ipsec.ike.ike3gpp.Ike3gppExtension.Ike3gppCallback);
    method @NonNull public android.net.ipsec.ike.ike3gpp.Ike3gppExtension.Ike3gppCallback getIke3gppCallback();
    method @NonNull public android.net.ipsec.ike.ike3gpp.Ike3gppParams getIke3gppParams();
  }

  public abstract static class Ike3gppExtension.Ike3gppCallback {
    ctor public Ike3gppExtension.Ike3gppCallback();
    method public abstract void onIke3gppPayloadsReceived(@NonNull java.util.List<android.net.ipsec.ike.ike3gpp.Ike3gppInfo>);
  }

  public abstract class Ike3gppInfo {
    ctor public Ike3gppInfo();
    method public abstract int getInfoType();
    field public static final int INFO_TYPE_NOTIFY_BACKOFF_TIMER = 2; // 0x2
    field public static final int INFO_TYPE_NOTIFY_N1_MODE_INFORMATION = 1; // 0x1
  }

  public final class Ike3gppN1ModeInformation extends android.net.ipsec.ike.ike3gpp.Ike3gppInfo {
    method public int getInfoType();
    method @NonNull public byte[] getSnssai();
  }

  public final class Ike3gppParams {
    method public byte getPduSessionId();
    field public static final byte PDU_SESSION_ID_UNSET = 0; // 0x0
  }

  public static final class Ike3gppParams.Builder {
    ctor public Ike3gppParams.Builder();
    method @NonNull public android.net.ipsec.ike.ike3gpp.Ike3gppParams build();
    method @NonNull public android.net.ipsec.ike.ike3gpp.Ike3gppParams.Builder setPduSessionId(byte);
  }

}

